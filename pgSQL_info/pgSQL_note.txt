General commands:
>>  select version();
>>  \l                      // show list of databases (backshash L)
>>  \c [databaseName]       // switch(connect) to a new database
>>  \d                      // show the list of tables in a database
>>  create table [test_table](name varchar(50));  // create a new table with name test_table
>>  \dn                     // show the schema in a table
>>  \d+                     // show owner, size, access method,schema
>>  \conninfo               // show the connection info like databaseName, userName, host, port
>>  \q                      // quite the psql shell or terminal


// user access controll of the pSQL database: 
>>  psql -U userName -d your_database_name                                  // login with user to a targeted database
>>  \du                                                                     // show list of user role for database 
>>  create user [userName] with login encrypted password ['123456'];        // create a new user who can manage database, initally this user will have no permission, so give permission to it.
>>  create role [roleName] with login encrypted password ['123456'];        // create a role to give controll database
>>  grant all privileges on table [tableName] to [userName]                 // give permission of a table to a user. 'all privileges' means full CRUD 
>>  grant [select] on table [tableName] to [userName]                       // give Read or select permission to the user
>>  revoke [select] on table [tableName] from [userName]                    // remove Read or select permission from the user



SQL commands classification: 
    - DDl: create, drop, alter, truncate, rename        // (DDL=data definition lang)can create or remove table or database
    - DML: insert, update, delete                       // (DML=data management lang)can modify data from tables or database
    - DCL: grant, revoke                                // (DCL=data control lang)can control user access of tables or database
    - TCL: start transaction, commit, rollback, savepoint                  // (TCL=transection control lang)can control transection during data modification
    - DQL: select                                       // (DQL=data query lang)can query data from tables


Data type
    - boolean: true, false, null
    - number: 
        - int: 4 bytes range(+-2,147,483,648)
        - bigint: 8 bytes range(+-9,223,372,036,854,775,808)
        - smallint: 2 bytes range(+-32,768)
        - float4: 4 bytes & 6 digit precision
        - float8: 8 bytes & 15 digit precision
        - numeric: variable bytes(depend on input precision) bytes range(unlimited precision), ex: Numeric(4,3)
        - serial: range(like integer), auto increment
    - character: 
        - char: fixed length and storage is given during create column, if string is small than the column space, then it is padded with space and take full of the column. ex: CHAR(10) means a fixed-length string with a fixed length 10
        - varchar: variable length character type. Length is not specified and can vary up to the specified maximum length. no padding is added. MOre storage efficient when dealing with variable length string. ex: VARCHAR(255) means a variable length string with a maximum length 255 
        - text: a variable length type similar to VHARCHAR. It is not fixed-length. Typically used for longer text strings where the exact length is not known or can vary widely. Contain large amount og text like blogpost.
    - timestamptz: TIMESTAMPTZ(TIMESTAMP WITH TIME ZONE)
    - binary
    - json
    - uuid
    - array
    - xml

// Initial commands:
********************************DATABASE CRUD**********************************
>>  \l                                                      // check list of available database
>>  CREATE DATABASE [databaseName]                          // create a new database
>>  ALTER DATABASE [dbOldName] RENAME TO [dbNewName]        // change database name
>>  DROP DATABASE [databaseName]                            // delete a database

********************************TABLE CRUD**********************************
- ON DELETE CASCADE: delete the child/refrenced docs 
- ON DELETE SET NULL: set the id value NULL when the referenced doc deleted
- ON DELETE RESTRICT / ON DELETE ON ACTION(default): don't allow to delete the parent doc until all child ref docs are deleted
- ON DELETE SET DEFAULT: set the default value

>>  CREATE TABLE [tableName](
        column1 datatype constraint,
        column2 datatype constraint,
        column3 datatype constraint,
        ........................
    );                                  // create a new table
                    CREATE TABLE person(
                        id SERIAL,
                        person_id SERIAL,
                        first_name VARCHAR(50) NOT NULL,
                        last_name VARCHAR(50) UNIQUE,
                        customer_id INTEGER REFERENCE customers(customerId),
                        status BOOLEAN DEFAULT true. 
                        age INTEGER CHECK (age >= 18),
                        isActive BOOLEAN,
                        dob DATE
                        PRIMARY KEY(id),
                        FOREIGN KEY (customer_id) REFERENCES customers(customerId),
                        CONSTRAINT age_check CHECK(age >= 18 AND status=true)
                        /% use any one of the below four constraints for ref %/
                        ON DELETE CASCADE
                        ON DELETE RESTRICT          // it is default constraint
                        ON DELETE SET NULL
                        ON DELETE SET DEFAULT
                    );
                    Constraints:
                        - NOT NULL: must have a value
                        - UNIQUE:  can't be duplicate
                        - REFERENCES foreignTableName(foreignColumnName)
                        - DEFAULT: set the default value
                        - CHECK: add a if condition to test the custom condition


Table related Queries:
    - ALTER: to change schema or column
    - ADD(add a new column):
        >> ALTER TABLE table_name 
            ADD COLUMN column_name datatype constraints;

    - DROP (drop an old column):
        >> ALTER TABLE table_name 
            DROP COLUMN column_name;

    - RENAME TO (change table name):
        >> ALTER TABLE table_name 
            RENAME TO new_table_name;

    - RENAME COLUMN(change column name):
        >> ALTER TABLE table_name 
            RENAME COLUMN old_column_name TO new_column_name;
    
    - SET/DROP(change datatype/constraint):
        >> ALTER TABLE table_name                                           // table name
            ALTER COLUMN column_name SET DATA TYPE data_type,               // data type
            ALTER COLUMN column_name SET DEFAULT default_value NOT NULL,    // constraints                    
            ALTER COLUMN column_name SET NOT NULL,                            
            ALTER COLUMN column_name DROP NOT NULL;                            
    - TRUNCATE(delete all rows or empty the table but keep the columns & constraints)
        >> TRUNCATE TABLE table_name;         

    - ADD CONSTRAINT(add constraint on a column): give a name of constraint = `constraint_name+table_name+column_name`
        >> ALTER TABLE table_name
            ADD CONSTRAINT constraint_name_table_name_col_name CONSTRAINT_NAME(col_name);
            eg: ALTER TABLE users
                ADD CONSTRAINT unique_users_age UNIQUE(age);
                ADD CONSTRAINT pk_users_age PRIMARY KEY(age);
    

>> DROP TABLE [tableName]                                   // delete or remove a table from database
>> INSERT INTO tableName (column1, column2, column3) 
                VALUES(value1_1,value1_2,value1_3),
                VALUES(value2_1,value2_2,value2_3),
                VALUES(value3_1,value3_2,value3_3),


SELECT: Retrive data from tables
    - SELECT
    - DISTINCT  : DISTINCT ensure only unique rows are returned, no duplicate
    - FROM 
    - WHERE 
    - ORDER 
    - GROUP BY  : group rows that have the same value in specified cols
    - HAVING    : Filters the result of a GROUP BY clause based on specified condition (usually aggregated functions)
    - JOIN 
    - LIMIT     : sort the data
    - OFFSET    : number of rows to skip before starting to return rows.

                        
    >> SELECT DISTINCT col1 as "customName",
        UPPER(col2),
        AVG(col3), 
        CONCAT(fname,' ',lname) AS full_name, 
        CASE 
            WHEN age >= 18 
                THEN 'Adult' 
            ELSE 'Minor' 
        END AS "Age Category",
        COALESCE(email,"email not given") as "Email",
        EXTRACT(year from date_of_birth::date)                              
        FROM TABLE table1
        JOIN table2 ON table1.column3 = table2.column5
        WHERE condition1 AND condition2
        GROUP BY column1                                        
        HAVING aggregate_function(column2) > value               
        ORDER BY column1 DESC                                   
        LIMIT 10
        OFFSET 5;                                               

SELECT Functions: Operate on a set of rows and return a single value summarizing on the set. Often used with the GROUP BY clouse.
    ~ Aggregate Functions:
        - COUNT()
        - MAX()
        - MIN()
        - SUM()
        - AVG()
        >> SELECT age, AVG(marks)
            FROM student
            GROUP BY age
            HAVING MAX(age) > 15
            ORDER BY AVG(age), id DESC
            LIMIT 4;

    ~ Scalar Functions: Operate on each single row and return single value for each row.
        - UPPER(text)
        - LOWER(text)
        - CONCAT(text1,text2,...)
        - INITCAP(text)                 : Capitalizes the first letter of each word in a string.
        - LENGTH(text)
        - SUBSTRING(text FROM startLengthNumber FOR characterlengthNumber)
        - TRIM(text)
        - REPLACE(text, from_substring, to_substring) : replace a part of text. eg. REPLACE('hello world', 'world', 'universe'); returns 'hello universe'.
        - POSITION(substring IN string) : Returns the position of a substring within a string. eg. POSITION('l' IN 'hello'); returns 3.
        - COALESCE(value1, value2, ...) : Returns the first non-null value in the list. When we want not to send any null value, then use this method. It will return the next value if first value being NULL. eg.  COALESCE(NULL, 'hello', 'world'); returns 'hello'.
        - ROUND(number [, precision])   : Rounds a number to a specified number of decimal places. eg. ROUND(3.14159, 2)  returns 3.14
        - CAST(expression AS type): Converts a value to a specified data type. eg, CAST('123' AS INTEGER) returns 123.

IS vs Equal(=):
    ~ IS:
        - typically use IS NULL or IS NOT NULL to check whether a column or expression contains a NULL value.
        - When you want to check for NULL values explicitly.
        - For comparisons involving NULL values.
    ~ Equal(=):
        - The = operator is used for equality comparison between two values or expressions.
        - When you want to compare non-NULL values for equality.
        - For regular value comparisons.


Operators:
    - IN        : checks whether a value matches any value in a list.
                    >> SELECT * FROM employees WHERE department_id IN (101, 102, 103);
    - BETWEEN   : checks whether a value lies within a specified range.
                    >> SELECT * FROM products WHERE price BETWEEN 10 AND 100;
    - LIKE      : Search for a specified pattern in a column. % is used as a wildcard to match any sequence of characters, and _ matches any single character.
                    >> SELECT * FROM customers WHERE last_name LIKE 'Sm%';   // It match the last_name start with 'Sm....'.
                    >> SELECT * FROM customers WHERE last_name LIKE '%Sm';   // It match the last_name ends with '...Sm'.
                    >> SELECT * FROM customers WHERE last_name LIKE '__sm%';   // It match the last_name first 2 characters can be anything, 3rd & 4th character will be 'sm' then ends can be any other characters. Here the double underscore '__' represent each character index. 
    - ILIKE     : performs a case-insensitive pattern match.
                    >> SELECT * FROM products WHERE product_name ILIKE '%apple%';



Delete Operations:
    -  delete based on condition 
        >> DELETE FROM table_name 
            WHERE condition
            eg: DELETE FROM student where marks < 33;

Update OPeration:
    >> UPDATE table_name
        SET col1=val1, col2=val2
        WHERE condition;
        eg: UPDATE student SET marks=78 WHERE id=14;



Date & Time:
    >> SHOW TIMEZONE:    // current timezone
    >> TIMESTAMP WITHOUT TIME ZONE, TIMESTAMP WITH TIME ZONE;
    >> SELECT NOW();
    >> SELECT CURRENT_DATE;  
    >> SELECT NOW()::DATE;
    >> SELECT NOW()::TIME;
    >> SELECT TO_CHAR(NOW(),'YYYY/MM/DD');      // format to a specific format
    >> SELECT CURRENT_DATE - INTERVAL '1 YEAR'; // interval of time;
    >> SELECT AGE(CURRENT_DATE,'1995-07-29');   // get age time by using age() method
    >> SELECT EXTRACT(year from '2024-02-15'::date);



Joins in SQL:
        eg:
         SELECT * FROM department
         INNER JOIN course
         ON department.id = course.department_id;
    Types of join:
        ~ Inner Join: Return records that have matching values in both tables.
            >> SELECT column(s)
                FROM tableA
                INNER JOIN tableB
                ON tableA.col_name = tableB.col_name;
        ~ Left Join : Return all records from left table and from right table only matching rows.
            >> SELECT column(s)
                FROM tableA
                LEFT OUTER JOIN tableB
                ON tableA.col_name = tableB.col_name;
        ~ Right Join : Return all records from right table and from left table only matching rows.
            >> SELECT column(s)
                FROM tableA
                RIGHT OUTER JOIN tableB
                ON tableA.col_name = tableB.col_name;
        
        ~ FULL Join : Return all records from both right table and  left table.
            >> SELECT column(s)
                FROM tableA
                FULL OUTER JOIN tableB
                ON tableA.col_name = tableB.col_name;
        ~ CROSS Join (AxB): Return all multiply row records from both right table and  left table.
            >> SELECT column(s)
                FROM tableA
                CROSS JOIN tableB;
        ~ NATURAL Join: Return all records from both right table and  left table with same column name and data type. must have to be a common column name with same data type. suppose shop.user_id = product.user_id; here the "user_id" column is common in both "product" and "shop" table with the same data type id as INTEGER.
            >> SELECT column(s)
                FROM tableA
                NATURAL JOIN tableB;
        


Sub Query:
      (sub_query) SELECT MAX(salary) from employee WHERE department_name='HR';
    - SELECT * FROM employee WHERE salary > (SELECT MAX(salary) from employee WHERE department_name='HR');



PostgreSQL Views: Views are virtual tables generated from the result of a SQL query. We can write a query and store them in a variable, so that we can re-use the SELECT query which return new transformed table
    // create a virtual view table by taking rollNo,marks and name from the student table.
    >> CREATE VIEW view_student_table AS 
        SELECT rollNo, name, marks FROM student;
    >> SELECT * FROM view_student_table;
    >> INSERT INTO student(name,marks) VALUES("ab",45);
    >> DROP VIEW IF EXISTS view_student_table;          // always refresh by re-creating the view table after inserting any data to main table to keep update the view table
    >> CREATE VIEW view_student_table AS 
        SELECT rollNo, name, marks FROM student;



Functions/Procedure in pgSQL: It return dynamically complex pre-written query. Main difference between function and preocedure is that function return data and procedure doesn't return anything.
    :: Function Syntax
    >> CREATE FUNCTION function_name(param1 data_type1,param2 data_type2,)
        RETURNS data_type/INT/DATE/VOID/BOOL
        LANGUAGE SQL
        AS
        $$
            SELECT * FROM table_name WHERE column_name1 = param1 AND column_name2 != param2;
        $$;
    >> SELECT  function_name();         // It will run the query inside the above function

    :: Procedure Syntax
    >> CREATE PROCEDURE procedure_name(param_emp_id INT)
        LANGUAGE PLPGSQL
        AS
        $$
            DECLARE
	        exist_employee_id_var INTEGER;
            BEGIN
                SELECT employee_id INTO exist_employee_id_var FROM employee where employee_id = param_emp_id;           // look for the row by using param value and store it in variable exist_employee_id_var
                DELETE FROM employee where employee_id = exist_employee_id_var;                                         // use the variable value to delete row, not param data.
                RAISE NOTICE 'Successful! Your custom message.';
            END
        $$;
    >> CALL procedure_name();       // insted of SELECT, we use CALL.



Trigger in pgSQL: it execute/run when any event occure in database. It is a database object that aautomatically executes a specified set of actions in response to certain database events or conditons.
    - Table level events:
        - INSERT, UPDATE, DELETE , TRUNCATE, 
    - Database level events:
        - Database Startup, Database Shutdown, Connection start and end etc.
    
    >> CREATE TRIGGFER trigger_name
        {BEFORE | AFTER | INSTED OF} {INSERT | UPDATE | DELETE | TRUNCATE}
        ON table_name 
        [FOR EACH ROW]
        EXECUTE FUNCTION function_name();

    - Example:
        // Store deleted users information in a new table when delete a user
        // step 1: Trigger Function 
        >> CREATE FUNCTION save_deleted_user_fn()
            RETURNS TRIGGER 						-- Must return "TRIGGER"
            LANGUAGE plpgsql
            AS
            $$
                INSERT INTO delete_users_table VALUES (OLD.column1,OLD.column2,now());	-- OLD is the row to be deleted which will come from TRIGGER. now() is the current time
                RAISE NOTICE 'Successful! Deleted user is listed.';
                RETURN OLD;                                                             -- must return something
            $$;

        // step 2: Create the Trigger 
        >> CREATE TRIGGER save_deleted_employee_trigger
            BEFORE DELETE 
            ON employee_table
            FOR EACH ROW
            EXECUTE FUNCTION save_deleted_user_fn();



Indexing in pgSQL:
    >> CREATE INDEX idx_table_name_column_name_as_index_name
        ON table_name(column_name);                              // on which table's which column the index will be created
