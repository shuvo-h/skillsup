// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Post {                                            // model name
  id          Int     @id @default(autoincrement())    // @id = primary key
  title       String
  content     String
  published   Boolean     @default(false)
  authorId    Int                                   // ? = optional
  author User @relation(fields: [authorId], references: [id])   // reference of Post.authorId=User.id
  postCategory PostCategory[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  

  @@map("posts")                                        // table name
}

model User {
  id Int @id @default(autoincrement())
  username String @unique
  email String 
  role UserRole @default(user)          // enum type {user,admin}
  profile Profile?                       // One to one relation: for reference of ProfileModel , if unique, then Profile?, if not unique then Profile[] . 
  post Post[]       // One to Many relation: ref from PostModel.authorId = User.id 
  

  @@map("users")
}

model Profile {
  id Int @id @default(autoincrement())
  bio String?
  userId Int @unique
  user User @relation(fields: [userId],references: [id])  // make reference between Profile.userId = User.id. It wills how error until you add the array in UserModel.

  @@map("profiles")
}
model Category {
  id Int @id @default(autoincrement())
  name String?
  postCategory PostCategory[]

  @@map("categories")
}
// for many to many relation we create a separate table by using only ids/refs. Here we create a composit id using the referenced ids
model PostCategory {
  postId Int
  post Post @relation(fields: [postId], references: [id])
  categoryId Int
  category Category @relation(fields: [categoryId], references: [id])

  @@id([postId,categoryId])           // composit id, when multiple foreign key is used to create a new id, then it is called composit id.
  @@map("post_category")
}

// enum type
enum UserRole {
  user
  admin
}